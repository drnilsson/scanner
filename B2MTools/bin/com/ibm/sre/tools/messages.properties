# Input path delimiter is set for PCs. Mac and Linux users change this to /
LogScan.delimiter=\\
# Used to enable sending results to a file
# Set to 'false' to disable this feature
LogScan.output2file=true
# The path for the output file. Mac and Linux users need to change this path.
LogScan.outputPath=c:\\logs\\
# place holder, to print summary only
LogScan.printDetail=false
# change to true to skip detailed log message display
LogScan.summaryOnly=false
# directories that are filtered from the scan list
# the list can be extended by adding more entries
LogScan.filter1=test
LogScan.filter2=test-suite
LogScan.filter3=mock
LogScan.filter4=constants
LogScan.filter5=address.client
LogScan.filter6=domain
LogScan.filter7=model
LogScan.filter8=spec
LogScan.filter9=pojo
LogScan.filter10=exception
# files that are excluded from the scan
# the list can be extended by adding more entries
LogScan.ignore1=package-info.java
LogScan.ignore2=config.js
LogScan.ignore3=dojo.js
LogScan.ignore4=jquery.js
LogScan.ignore5=.eslintrc.js
# for pharmacy
LogScan.ignore6=Person.java
LogScan.ignore7=PersonRequest.java
LogScan.ignore8=ContactInfo.java
LogScan.ignore9=PersonRequest.java
LogScan.ignore10=AddressRequest.java
LogScan.ignore11=AddressResponse.java
# The following items are used for identifying the different log calls
LogScan.fatal=.fatal(
LogScan.error=.error(
LogScan.warn=.warn(
LogScan.info=.info(
LogScan.debug=.debug(
LogScan.catch=catch
# message text in the scan out
LogScan.start=Starting scan for 
LogScan.filesSkipped=Total files skipped (Interfaces and Constants): 
LogScan.needLogging=Total files that may need logging: 
LogScan.processPom=Processing pom.xml.... 
LogScan.javaLogger=ogger.version
LogScan.loggerFound=kplogger version: 
LogScan.interface=public interface
LogScan.startScan=Starting scan for {} 
LogScan.scanJS=processing package.json....
LogScan.JSlogger=kp-cloud4js-logger 
LogScan.nologger=*** No kplogger found in this component ***
LogScan.startScanning=\nStart scanning files in: 
LogScan.scanning=Scanning file: 
LogScan.interfaceFound=\ \ Interface found - no logging required
LogScan.contantsFile=\ \ Constants - no logging required
LogScan.badpath=bad path for scanning: 
LogScan.MissingScanArg=Missing scan path in program arguments
LogScan.noLoggingFound=\ \ No logging found in the file
LogScan.semicolon=;
LogScan.message1=Starting scan for 
LogScan.message2=Output file 
LogScan.message3=Scanning file: 
LogScan.message4=\ \ catch line 
LogScan.message5=\ \ File scan results:
LogScan.message6=\ \ log.fatal: 
LogScan.message7=\ \ log.error: 
LogScan.message8=\ \ log.warn: 
LogScan.message9=\ \ log.info: 
LogScan.message10=\ \ log.debug: 
LogScan.message10a=\ \ total catches: 
LogScan.message11=\nScanning totals for component 
LogScan.message12=Total files scanned: 
LogScan.message13=Total log.fatal messages: 
LogScan.message14=Total log.error messages: 
LogScan.message15=Total log.warn messages: 
LogScan.message16=Total log.info messages: 
LogScan.message17=Total log.debug messages: 
LogScan.message18=Total catches found: 
LogScan.message-nologging=Total files with no logging: 
LogScan.message-percentnologging=Percentage of files with no logging: 
LogScan.message-debugonly=Total files with only debug logging: 
LogScan.no-logging-ids=\nNo logging IDs implemented
LogScan.message20=\ \ log line 
LogScan.message21=\ \ catch line 
LogScan.messageIDs=\nDetected logging IDs implemented
LogScan.catalog-gen=Error Catalog generated for 
CatGen.filenotfound=Constants file not found
CatGen.comma=, 
# file name used for the error catalog
CatGen.filename=errorcat.csv
CatGen.write-error=Exception writing error Catalog
CatGen.item=Error Catalog item
CatGen.message-from-code=Error message from code:  
CatGen.short-descriptions=Total short error descriptions: 
CatGen.done=Message catalog generation complete in: {}
CatGen.num-error-desc=\nTotal error descriptions: 
CatGen.percent-improved=Percentage of error messages that can be improved: 